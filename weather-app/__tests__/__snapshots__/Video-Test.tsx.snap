// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<View
  style={
    Object {
      "backgroundColor": "black",
      "flex": 1,
    }
  }
>
  <Composition
    onTimelinesLoaded={[Function]}
    source="Auryn_VideoContainer"
  >
    <TimelineRef
      loop={false}
      name="In"
      onAborted={[Function]}
      onCompleted={[Function]}
      onCompletedForward={[Function]}
      onCompletedReverse={[Function]}
      onCompositionDidLoad={[Function]}
      onPaused={[Function]}
      onPausedForward={[Function]}
      onPausedReverse={[Function]}
      onPlay={[Function]}
      onPlayForward={[Function]}
      onPlayReverse={[Function]}
      onStarted={[Function]}
      onStartedForward={[Function]}
      onStartedReverse={[Function]}
    />
    <TimelineRef
      loop={false}
      name="Out"
      onAborted={[Function]}
      onCompleted={[Function]}
      onCompletedForward={[Function]}
      onCompletedReverse={[Function]}
      onCompositionDidLoad={[Function]}
      onPaused={[Function]}
      onPausedForward={[Function]}
      onPausedReverse={[Function]}
      onPlay={[Function]}
      onPlayForward={[Function]}
      onPlayReverse={[Function]}
      onStarted={[Function]}
      onStartedForward={[Function]}
      onStartedReverse={[Function]}
    />
    <YiImageView
      name="Image-Background"
      onTimelinesLoaded={[Function]}
      visible={false}
    />
    <TimelineRef
      loop={false}
      name="EndSqueeze-Compress"
      onAborted={[Function]}
      onCompleted={[Function]}
      onCompletedForward={[Function]}
      onCompletedReverse={[Function]}
      onCompositionDidLoad={[Function]}
      onPaused={[Function]}
      onPausedForward={[Function]}
      onPausedReverse={[Function]}
      onPlay={[Function]}
      onPlayForward={[Function]}
      onPlayReverse={[Function]}
      onStarted={[Function]}
      onStartedForward={[Function]}
      onStartedReverse={[Function]}
    />
    <TimelineRef
      loop={false}
      name="EndSqueeze-Expand"
      onAborted={[Function]}
      onCompleted={[Function]}
      onCompletedForward={[Function]}
      onCompletedReverse={[Function]}
      onCompositionDidLoad={[Function]}
      onPaused={[Function]}
      onPausedForward={[Function]}
      onPausedReverse={[Function]}
      onPlay={[Function]}
      onPlayForward={[Function]}
      onPlayReverse={[Function]}
      onStarted={[Function]}
      onStartedForward={[Function]}
      onStartedReverse={[Function]}
    />
    <ViewRef
      name="UpNext-Countdown"
      onCompositionDidLoad={[Function]}
      onTimelinesLoaded={[Function]}
      visible={true}
    >
      <YiTextSceneNode
        name="Timer"
        text=""
        visible={false}
      />
    </ViewRef>
    <YiPushButtonView
      focusable={false}
      name="Button-UpNext-Primary"
      onCompositionDidLoad={[Function]}
      onPress={[Function]}
      onTimelinesLoaded={[Function]}
    >
      <YiImageView
        name="Image-UpNext-Primary"
        onTimelinesLoaded={[Function]}
        source={
          Object {
            "uri": "https://via.placeholder.com/534x300",
          }
        }
      />
      <YiTextSceneNode
        name="Title"
        text="You.i TV"
      />
      <YiTextSceneNode
        name="Subhead"
        text="05/24/2015"
      />
      <YiTextSceneNode
        name="Duration"
        text="45m"
      />
    </YiPushButtonView>
    <ViewRef
      name="Video"
      onCompositionDidLoad={[Function]}
      onTimelinesLoaded={[Function]}
    />
    <YiPushButtonView
      name="Video"
      onCompositionDidLoad={[Function]}
      onPress={[Function]}
      onTimelinesLoaded={[Function]}
    >
      <VideoRef
        metadata={
          Object {
            "BookmarkInterval": 1,
            "mute": true,
          }
        }
        muted={true}
        name="VideoSurface"
        onAudioBitrateChanged={[Function]}
        onCurrentTimeUpdated={[Function]}
        onDurationChanged={[Function]}
        onErrorOccurred={[Function]}
        onPaused={[Function]}
        onPlaybackComplete={[Function]}
        onPlaying={[Function]}
        onReady={[Function]}
        onStateChanged={[Function]}
        onTotalBitrateChanged={[Function]}
        onVideoBitrateChanged={[Function]}
        source={
          Object {
            "type": "",
            "uri": "",
          }
        }
        src={
          Object {
            "drmInfo": undefined,
            "drmScheme": undefined,
            "headers": undefined,
            "isAsset": false,
            "isNetwork": false,
            "mainVer": 0,
            "patchVer": 0,
            "startTimeMs": undefined,
            "type": "",
            "uri": "",
          }
        }
      />
      <ViewRef
        name="Player-Controls"
        onCompositionDidLoad={[Function]}
        onTimelinesLoaded={[Function]}
      >
        <YiPushButtonView
          name="Btn-Back"
          onCompositionDidLoad={[Function]}
          onPress={[Function]}
          onTimelinesLoaded={[Function]}
          visible={false}
        />
        <TimelineRef
          loop={false}
          name="Show"
          onAborted={[Function]}
          onCompleted={[Function]}
          onCompletedForward={[Function]}
          onCompletedReverse={[Function]}
          onCompositionDidLoad={[Function]}
          onPaused={[Function]}
          onPausedForward={[Function]}
          onPausedReverse={[Function]}
          onPlay={[Function]}
          onPlayForward={[Function]}
          onPlayReverse={[Function]}
          onStarted={[Function]}
          onStartedForward={[Function]}
          onStartedReverse={[Function]}
        />
        <TimelineRef
          loop={false}
          name="Hide"
          onAborted={[Function]}
          onCompleted={[Function]}
          onCompletedForward={[Function]}
          onCompletedReverse={[Function]}
          onCompositionDidLoad={[Function]}
          onPaused={[Function]}
          onPausedForward={[Function]}
          onPausedReverse={[Function]}
          onPlay={[Function]}
          onPlayForward={[Function]}
          onPlayReverse={[Function]}
          onStarted={[Function]}
          onStartedForward={[Function]}
          onStartedReverse={[Function]}
        />
        <TimelineRef
          loop={false}
          name="Set-Live"
          onAborted={[Function]}
          onCompleted={[Function]}
          onCompletedForward={[Function]}
          onCompletedReverse={[Function]}
          onCompositionDidLoad={[Function]}
          onPaused={[Function]}
          onPausedForward={[Function]}
          onPausedReverse={[Function]}
          onPlay={[Function]}
          onPlayForward={[Function]}
          onPlayReverse={[Function]}
          onStarted={[Function]}
          onStartedForward={[Function]}
          onStartedReverse={[Function]}
          playOnTrue={false}
        />
        <YiPushButtonView
          focusable={true}
          name="Btn-PlayPause"
          onCompositionDidLoad={[Function]}
          onFocus={[Function]}
          onPress={[Function]}
          onTimelinesLoaded={[Function]}
          visible={false}
        >
          <TimelineRef
            autoplay={true}
            direction="forward"
            loop={false}
            name="Toggle-On"
            onAborted={[Function]}
            onCompleted={[Function]}
            onCompletedForward={[Function]}
            onCompletedReverse={[Function]}
            onCompositionDidLoad={[Function]}
            onPaused={[Function]}
            onPausedForward={[Function]}
            onPausedReverse={[Function]}
            onPlay={[Function]}
            onPlayForward={[Function]}
            onPlayReverse={[Function]}
            onStarted={[Function]}
            onStartedForward={[Function]}
            onStartedReverse={[Function]}
          />
        </YiPushButtonView>
        <ViewRef
          name="Player-Scrubber-Container"
          onCompositionDidLoad={[Function]}
          onTimelinesLoaded={[Function]}
        >
          <YiTextSceneNode
            name="Duration"
            visible={true}
          />
          <YiScrollBarView
            minimumTrackTintColor="#DA1B5B"
            name="Bar"
            onCompositionDidLoad={[Function]}
            onSlidingComplete={[Function]}
            onTimelinesLoaded={[Function]}
            onValueChange={[Function]}
            step={1}
            thumbImage={
              Object {
                "uri": "res://drawable/default/Player-Thumb.png",
              }
            }
            visible={false}
          />
        </ViewRef>
        <YiPushButtonView
          focusable={true}
          name="Btn-TvGuide"
          onCompositionDidLoad={[Function]}
          onPress={[Function]}
          onTimelinesLoaded={[Function]}
          visible={false}
        />
        <ViewRef
          name="Live-TvGuide"
          onCompositionDidLoad={[Function]}
          onTimelinesLoaded={[Function]}
          visible={false}
        >
          <TimelineRef
            loop={false}
            name="ShowGuide"
            onAborted={[Function]}
            onCompleted={[Function]}
            onCompletedForward={[Function]}
            onCompletedReverse={[Function]}
            onCompositionDidLoad={[Function]}
            onPaused={[Function]}
            onPausedForward={[Function]}
            onPausedReverse={[Function]}
            onPlay={[Function]}
            onPlayForward={[Function]}
            onPlayReverse={[Function]}
            onStarted={[Function]}
            onStartedForward={[Function]}
            onStartedReverse={[Function]}
          />
          <TimelineRef
            loop={false}
            name="HideGuide"
            onAborted={[Function]}
            onCompleted={[Function]}
            onCompletedForward={[Function]}
            onCompletedReverse={[Function]}
            onCompositionDidLoad={[Function]}
            onPaused={[Function]}
            onPausedForward={[Function]}
            onPausedReverse={[Function]}
            onPlay={[Function]}
            onPlayForward={[Function]}
            onPlayReverse={[Function]}
            onStarted={[Function]}
            onStartedForward={[Function]}
            onStartedReverse={[Function]}
          />
          <ListRef
            DEPRECATED_sendUpdatedChildFrames={false}
            alwaysBounceHorizontal={false}
            alwaysBounceVertical={true}
            data={Array []}
            disableVirtualization={false}
            extraData={false}
            getItem={[Function]}
            getItemCount={[Function]}
            horizontal={false}
            initialNumToRender={10}
            keyExtractor={[Function]}
            maxToRenderPerBatch={10}
            name="Live-TvGuide-List"
            numColumns={1}
            onContentSizeChange={null}
            onEndReachedThreshold={2}
            onLayout={[MockFunction]}
            onMomentumScrollBegin={[MockFunction]}
            onMomentumScrollEnd={[MockFunction]}
            onResponderGrant={[MockFunction]}
            onResponderReject={[MockFunction]}
            onResponderRelease={[MockFunction]}
            onResponderTerminationRequest={[MockFunction]}
            onScroll={[MockFunction]}
            onScrollBeginDrag={[MockFunction]}
            onScrollEndDrag={[MockFunction]}
            onScrollShouldSetResponder={[MockFunction]}
            onStartShouldSetResponder={[MockFunction]}
            onStartShouldSetResponderCapture={[MockFunction]}
            onTouchCancel={[MockFunction]}
            onTouchEnd={[MockFunction]}
            onTouchMove={[MockFunction]}
            onTouchStart={[MockFunction]}
            renderItem={[Function]}
            renderScrollComponent={[Function]}
            scrollBarThumbImage={null}
            scrollEnabled={true}
            scrollEventThrottle={50}
            sendMomentumEvents={true}
            snapToEnd={true}
            snapToStart={true}
            stickyHeaderIndices={Array []}
            style={
              Array [
                Object {
                  "flexDirection": "column",
                  "flexGrow": 1,
                  "flexShrink": 1,
                  "overflow": "scroll",
                },
                undefined,
              ]
            }
            updateCellsBatchingPeriod={50}
            viewabilityConfigCallbackPairs={Array []}
            windowSize={21}
          >
            <ScrollContentData
              collapsable={false}
              onLayout={[MockFunction]}
              style={
                Array [
                  false,
                  undefined,
                ]
              }
            />
          </ListRef>
          <ViewRef
            name="Live-TvGuide-List"
            onCompositionDidLoad={[Function]}
            onTimelinesLoaded={[Function]}
          />
          <YiPushButtonView
            name="Btn-TvGuide-Close"
            onCompositionDidLoad={[Function]}
            onPress={[Function]}
            onTimelinesLoaded={[Function]}
          />
        </ViewRef>
        <YiPushButtonView
          name="Btn-TvGuide"
          onCompositionDidLoad={[Function]}
          onTimelinesLoaded={[Function]}
          visible={false}
        />
        <ViewRef
          name="Video-TextDetails"
          onCompositionDidLoad={[Function]}
          onTimelinesLoaded={[Function]}
        >
          <YiTextSceneNode
            name="Title"
            text="You.i TV"
          />
          <ViewRef
            name="Live-Metadata"
            onCompositionDidLoad={[Function]}
            onTimelinesLoaded={[Function]}
            visible={false}
          >
            <YiTextSceneNode
              name="Text-Detail-1"
              text="0"
            />
            <YiTextSceneNode
              name="Text-Detail-2"
              text="Action, Adventure"
            />
          </ViewRef>
          <YiTextSceneNode
            name="Details"
            text="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
            visible={false}
          />
        </ViewRef>
      </ViewRef>
    </YiPushButtonView>
  </Composition>
</View>
`;
